// Generated by CoffeeScript 1.10.0
var kadmin;

kadmin = {
  setting: {
    admin_project: 'kaleido',
    admin_url: 'm',
    base_url: '/',
    project_prefix_url: 'project'
  },
  project: {
    name: 'kaleido',
    path: '',
    allow_manage_ip: '',
    model: []
  },
  auth: {
    is_login: false,
    is_admin: false,
    admin_role_name: "admin",
    username: "Guest",
    session: null,
    auth: {
      role: '',
      user: ''
    },
    csrf: '?'
  },
  projects: [],
  require: {},
  with_csrf: function(call) {
    var f;
    f = function(dtd) {
      dtd = $.Deferred();
      $.getJSON(kadmin.setting.base_url + 'csrf').done(function(d) {
        if (typeof d === "object") {
          kadmin.auth.csrf = d.csrf;
          console.log("with_csrf resolve!");
          dtd.resolve();
          if (typeof call === 'function') {
            return call();
          }
        }
      });
      return dtd.promise();
    };
    return $.when(f());
  },
  reset: function() {
    this.auth.username = "Guest";
    this.auth.is_login = false;
    this.auth.is_admin = false;
    this.project.name = '';
    return this.project.model = [];
  },
  me: function(call) {
    return $.getJSON(kadmin.setting.base_url + 'me').done(function(data) {
      if (_.isObject(data.account) && (_.size(data.account) > 0)) {
        return _.each(data.account, function(val, key) {
          kadmin.auth.username = val.auth.login_name;
          kadmin.auth.userrole = val.auth.role;
          kadmin.auth.session = val.auth;
          kadmin.project.name = key;
          kadmin.auth.is_login = true;
          if (key === kadmin.admin_project) {
            return kadmin.auth.is_admin = true;
          }
        });
      }
    }).always(function() {
      if (typeof call === 'function') {
        return call();
      }
    });
  },
  logout: function(call) {
    var f;
    f = function(dtd) {
      dtd = $.Deferred();
      $.getJSON(kadmin.setting.base_url + kadmin.setting.admin_url + '/auth/logout', function() {
        kadmin.reset();
        dtd.resolve();
        if (typeof call === 'function') {
          return call();
        }
      });
      return dtd.promise();
    };
    return $.when(f());
  },
  login: function(project, user, password) {
    var f, l, project_auth_url;
    l = {
      csrf: '',
      login_name: user,
      login_password: password,
      project_name: project
    };
    project_auth_url = kadmin.setting.admin_url;
    if (!(l.project_name === kadmin.setting.admin_project)) {
      project_auth_url = kadmin.setting.project_prefix_url + "/" + l.project_name;
    }
    f = function(dtd) {
      dtd = $.Deferred();
      kadmin.with_csrf().done(function() {
        $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
          return jqXHR.setRequestHeader('X-CSRF-Token', kadmin.auth.csrf);
        });
        console.log("kadmin login beforeSend =>", kadmin.auth.csrf);
        return $.ajax({
          url: kadmin.setting.base_url + project_auth_url + '/auth/login',
          method: 'POST',
          data: {
            'login_name': l.login_name,
            'login_password': md5(md5(l.login_password) + kadmin.auth.csrf),
            'csrf': kadmin.auth.csrf
          }
        }).done(function(data) {
          if (data.status === true) {
            kadmin.auth.is_login = true;
            kadmin.auth.username = data.value.login_name;
            kadmin.auth.userrole = data.value.role;
            kadmin.project.name = l.project_name;
            kadmin.auth.is_login = true;
            if (l.project_name === kadmin.setting.admin_project) {
              kadmin.auth.is_admin = true;
            }
          } else {
            kadmin.auth.is_login = false;
          }
          console.log("login resolve!");
          return dtd.resolve();
        });
      });
      return dtd.promise();
    };
    return $.when(f());
  },
  project_load: function(call) {
    var f;
    f = function(dtd) {
      dtd = $.Deferred();
      $.getJSON(kadmin.setting.base_url + kadmin.setting.project_prefix_url + '/' + kadmin.project.name + '/').done(function(data) {
        kadmin.project.model = data.model.data;
        kadmin.project.path = data.path;
        kadmin.project.allow_manage_ip = data.allowIP;
        dtd.resolve();
        if (typeof call === 'function') {
          return call();
        }
      });
      return dtd.promise();
    };
    return $.when(f());
  },
  model_parse: function(call) {
    var f;
    f = function(dtd) {
      dtd = $.Deferred();
      if (!(kadmin.project.name === '') && (kadmin.project.model != null)) {
        console.log(kadmin.project.model);
      }
      dtd.resolve();
      if (typeof call === 'function') {
        call();
      }
      return dtd.promise();
    };
    return $.when(f());
  },
  field_join_value: function(current_model, call) {
    var _fields, fields, models;
    models = _.filter(kadmin.project.model, function(m) {
      return m.name !== current_model;
    });
    _fields = _.filter(_.flatten(_.map(models, function(m) {
      var mm;
      mm = m;
      return _.map(m.fields, function(m1) {
        var nm;
        nm = m1;
        nm.model_name = mm.name;
        return nm;
      });
    })), function(m) {
      return !(_.contains(["join", "json"], m.type));
    });
    fields = _.map(_fields, function(f) {
      return f.model_name + "." + f.name;
    });
    console.log(fields);
    return fields;
  },
  model_destroy: function(model, call) {
    var f, m;
    m = model;
    f = function(dtd) {
      dtd = $.Deferred();
      console.log("kadmin model_destroy => ", m);
      kadmin.with_csrf().done(function() {
        $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
          return jqXHR.setRequestHeader('X-CSRF-Token', kadmin.auth.csrf);
        });
        return $.ajax({
          url: kadmin.setting.base_url + kadmin.setting.project_prefix_url + '/' + kadmin.project.name + '/destroy/model',
          contentType: 'application/json',
          method: 'POST',
          data: JSON.stringify(m)
        }).done(function(data) {
          dtd.resolve();
          if (typeof call === 'function') {
            return call();
          }
        });
      });
      return dtd.promise();
    };
    return $.when(f());
  },
  model_save: function(values, call) {
    var f, model_value;
    model_value = values;
    f = function(dtd) {
      dtd = $.Deferred();
      console.log("kadmin model_save => ", model_value);
      kadmin.with_csrf().done(function() {
        $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
          return jqXHR.setRequestHeader('X-CSRF-Token', kadmin.auth.csrf);
        });
        return $.ajax({
          url: kadmin.setting.base_url + kadmin.setting.project_prefix_url + '/' + kadmin.project.name + '/update/model',
          contentType: 'application/json',
          method: 'POST',
          data: JSON.stringify(model_value)
        }).done(function(data) {
          kadmin.require = data;
          dtd.resolve();
          if (typeof call === 'function') {
            return call();
          }
        });
      });
      return dtd.promise();
    };
    return $.when(f());
  },
  project_save: function(values, call) {
    var f, project_value;
    project_value = values;
    f = function(dtd) {
      dtd = $.Deferred();
      console.log(project_value);
      kadmin.with_csrf().done(function() {
        $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
          return jqXHR.setRequestHeader('X-CSRF-Token', kadmin.auth.csrf);
        });
        return $.ajax({
          url: kadmin.setting.base_url + kadmin.setting.project_prefix_url + '/' + project_value.name + '/update/model',
          contentType: 'application/json',
          method: 'POST',
          data: JSON.stringify(project_value)
        }).done(function(data) {
          dtd.resolve();
          if (typeof call === 'function') {
            return call();
          }
        });
      });
      return dtd.promise();
    };
    return $.when(f());
  },
  project_delete: function(name, call) {
    var f;
    f = function(dtd) {
      dtd = $.Deferred();
      console.log(name);
      dtd.resolve();
      if (typeof call === 'function') {
        call();
      }
      return dtd.promise();
    };
    return $.when(f());
  }
};
